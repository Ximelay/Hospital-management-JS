const { Patients, Workplaces, Passports, Addresses } = require("../models");

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (—Å –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã, –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º)
const getAllPatients = async (req, res) => {
    try {
        console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");

        const patients = await Patients.findAll({
            include: [
                { model: Workplaces, attributes: ["WorkplaceName"] },
                { model: Passports, attributes: ["SeriesNumber", "IssueDate"] },
                { model: Addresses, attributes: ["FullAddress", "AddressType"] } // ‚ùå –£–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
            ]
        });

        if (!patients || patients.length === 0) {
            return res.status(200).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
        }
        res.status(200).json(patients);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", error: err });
    }
};

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Å –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã, –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º)
const createPatient = async (req, res) => {
    try {
        console.log("–î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", req.body);

        const { FirstName, LastName, MiddleName, BirthDate, Gender, InsurancePolicyNumber, TelephoneNumber, EmailAddress, Workplace, PassportData, Address, AddressType } = req.body;

        if (!FirstName || !LastName || !BirthDate || !Gender || !InsurancePolicyNumber || !TelephoneNumber) {
            return res.status(400).json({ message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è." });
        }

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
        let workplaceRecord = await Workplaces.findOne({ where: { WorkplaceName: Workplace } });
        if (!workplaceRecord) {
            workplaceRecord = await Workplaces.create({ WorkplaceName: Workplace });
        }

        // üîπ –°–æ–∑–¥–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
        const newPatient = await Patients.create({
            FirstName,
            LastName,
            MiddleName,
            BirthDate,
            Gender,
            InsurancePolicyNumber,
            TelephoneNumber,
            EmailAddress,
            Workplaces_idWorkplaces: workplaceRecord.idWorkplaces,
        });

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (PassportData) {
            await Passports.create({
                SeriesNumber: PassportData,
                Patients_PatientID: newPatient.idPatient,
            });
        }

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å (–¢–ï–ü–ï–†–¨ –ü–†–ê–í–ò–õ–¨–ù–û)
        if (Address) {
            await Addresses.create({
                FullAddress: Address,
                AddressType: AddressType || "–î–æ–º–∞—à–Ω–∏–π", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–î–æ–º–∞—à–Ω–∏–π"
                Patients_PatientID: newPatient.idPatient,
            });
        }

        res.status(201).json(newPatient);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
const updatePatient = async (req, res) => {
    try {
        const { id } = req.params;
        const { FirstName, LastName, MiddleName, BirthDate, Gender, InsurancePolicyNumber, TelephoneNumber, EmailAddress, Workplace, PassportData, Address, AddressType } = req.body;

        const patient = await Patients.findByPk(id);
        if (!patient) {
            return res.status(404).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        await patient.update({
            FirstName,
            LastName,
            MiddleName,
            BirthDate,
            Gender,
            InsurancePolicyNumber,
            TelephoneNumber,
            EmailAddress,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
        if (Workplace) {
            let workplaceRecord = await Workplaces.findOne({ where: { WorkplaceName: Workplace } });
            if (!workplaceRecord) {
                workplaceRecord = await Workplaces.create({ WorkplaceName: Workplace });
            }
            patient.Workplaces_idWorkplaces = workplaceRecord.idWorkplaces;
            await patient.save();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (PassportData) {
            let passportRecord = await Passports.findOne({ where: { Patients_PatientID: id } });
            if (passportRecord) {
                await passportRecord.update({ SeriesNumber: PassportData });
            } else {
                await Passports.create({ SeriesNumber: PassportData, Patients_PatientID: id });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
        if (Address) {
            let addressRecord = await Addresses.findOne({ where: { Patients_PatientID: id } });
            if (addressRecord) {
                await addressRecord.update({ FullAddress: Address, AddressType: AddressType || "–î–æ–º–∞—à–Ω–∏–π" });
            } else {
                await Addresses.create({ FullAddress: Address, AddressType: AddressType || "–î–æ–º–∞—à–Ω–∏–π", Patients_PatientID: id });
            }
        }

        res.status(200).json(patient);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–º–µ—Å—Ç–µ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º)
const deletePatient = async (req, res) => {
    try {
        const { id } = req.params;
        const patient = await Patients.findByPk(id);
        if (!patient) {
            return res.status(404).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Å–ø–æ—Ä—Ç, –∞–¥—Ä–µ—Å)
        await Passports.destroy({ where: { Patients_PatientID: id } });
        await Addresses.destroy({ where: { Patients_PatientID: id } });

        // –£–¥–∞–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
        await patient.destroy();
        res.status(200).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω" });
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};

module.exports = {
    getAllPatients,
    createPatient,
    updatePatient,
    deletePatient,
};
