const { Patients, Workplaces, Passports, Addresses, AddressesTypes, MedicalCards } = require("../models");
const QRCode = require("qrcode");

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (—Å –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã, –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º)
const getAllPatients = async (req, res) => {
    try {
        console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");

        const patients = await Patients.findAll({
            include: [
                { model: Workplaces, attributes: ["WorkplaceName"] },
                { model: Passports, attributes: ["SeriesNumber", "IssueDate"] },
                {
                    model: Addresses,
                    attributes: ["FullAddress"],
                    include: [{ model: AddressesTypes, attributes: ["NameOfAddressType"] }]
                },
                { model: MedicalCards, attributes: ["idMedicalCard", "MedicalCardIssueDate"] } // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É
            ]
        });

        if (!patients || patients.length === 0) {
            return res.status(200).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
        }
        res.status(200).json(patients);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", error: err });
    }
};

const getPatientsForHospitalization = async (req, res) => {
    try {
        const patients = await Patients.findAll({
            attributes: ['idPatient', 'FirstName', 'LastName', 'MiddleName']
        });

        if (!patients || patients.length === 0) {
            return res.status(200).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
        }

        res.status(200).json(patients);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏", error: error })
    }
}

const getPatientByMedicalCard = async (req, res) => {
    try {
        const { idMedicalCard } = req.params;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (!idMedicalCard) {
            return res.status(400).json({ message: "–ù–æ–º–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω." });
        }

        const medicalCard = await MedicalCards.findOne({
            where: { CardNumber: idMedicalCard },  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CardNumber
            include: [
                {
                    model: Patients,
                    attributes: ["FirstName", "LastName", "MiddleName", "BirthDate", "Gender", "InsurancePolicyNumber", "TelephoneNumber", "EmailAddress"],
                    include: [
                        {
                            model: Workplaces,
                            attributes: ["WorkplaceName"], // –î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã
                        },
                        {
                            model: Passports,
                            attributes: ["SeriesNumber", "IssueDate"], // –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Å–ø–æ—Ä—Ç–µ
                        },
                        {
                            model: Addresses,
                            attributes: ["FullAddress"],
                            include: [
                                {
                                    model: AddressesTypes,
                                    attributes: ["NameOfAddressType"], // –¢–∏–ø –∞–¥—Ä–µ—Å–∞
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        if (!medicalCard) {
            return res.status(404).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –º–µ–¥–∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        }

        res.status(200).json(medicalCard);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};




const generateQRCode = async (req, res) => {
    try {
        const { medicalCardNumber } = req.params;

        if (!medicalCardNumber) {
            return res.status(400).json({ message: "–ù–æ–º–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω." });
        }

        const medicalCard = await MedicalCards.findOne({
            where: { CardNumber: medicalCardNumber },
            include: [{ model: Patients, attributes: ["FirstName", "LastName"] }]
        });

        if (!medicalCard) {
            return res.status(404).json({ message: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        const qrData = `–ú–µ–¥–∫–∞—Ä—Ç–∞: ${medicalCard.CardNumber}\n–§–ò–û: ${medicalCard.Patient.FirstName} ${medicalCard.Patient.LastName}`;
        const qrImage = await QRCode.toDataURL(qrData);

        res.status(200).json({ qrImage });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞", error: err });
    }
};


// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Å –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã, –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º)
const createPatient = async (req, res) => {
    try {
        const {
            FirstName, LastName, MiddleName, BirthDate, Gender,
            InsurancePolicyNumber, TelephoneNumber, EmailAddress,
            Workplace, PassportData, PassportIssueDate, Address, AddressType,
            MedicalCardNumber
        } = req.body;

        if (!FirstName || !LastName || !BirthDate || !Gender || !InsurancePolicyNumber || !TelephoneNumber || !PassportIssueDate) {
            return res.status(400).json({ message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è." });
        }

        // üîπ 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
        let workplaceRecord = await Workplaces.findOne({ where: { WorkplaceName: Workplace } });
        if (!workplaceRecord) {
            workplaceRecord = await Workplaces.create({ WorkplaceName: Workplace });
        }

        // üîπ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞
        let addressTypeRecord = await AddressesTypes.findOne({ where: { NameOfAddressType: AddressType } });
        if (!addressTypeRecord) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∞–¥—Ä–µ—Å–∞." });
        }

        // üîπ 3. –°–æ–∑–¥–∞—ë–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
        const newPatient = await Patients.create({
            FirstName, LastName, MiddleName, BirthDate, Gender,
            InsurancePolicyNumber, TelephoneNumber, EmailAddress,
            Workplaces_idWorkplaces: workplaceRecord.idWorkplaces
        });

        // üîπ 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        let passportRecord = null;
        if (PassportData) {
            passportRecord = await Passports.create({
                SeriesNumber: PassportData,
                IssueDate: PassportIssueDate,
                Patients_idPatient: newPatient.idPatient
            });
        }

        // üîπ 5. –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
        let addressRecord = null;
        if (Address) {
            addressRecord = await Addresses.create({
                FullAddress: Address,
                AddressesTypes_idAddressType: addressTypeRecord.idAddressType,
                Patients_idPatient: newPatient.idPatient
            });
        }

        // üîπ 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        const generatedCardNumber = MedicalCardNumber || `MC${Date.now()}`;

        // üîπ 7. –°–æ–∑–¥–∞—ë–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É
        const newMedicalCard = await MedicalCards.create({
            CardNumber: generatedCardNumber,
            MedicalCardIssueDate: new Date(),
            Patients_idPatient: newPatient.idPatient
        });

        // üîπ 8. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å ID –ø–∞—Å–ø–æ—Ä—Ç–∞, ID –∞–¥—Ä–µ—Å–∞ –∏ ID –º–µ–¥. –∫–∞—Ä—Ç—ã
        await newPatient.update({
            Passports_idPassport: passportRecord ? passportRecord.idPassport : null,
            Addresses_idAddress: addressRecord ? addressRecord.idAddress : null,
            MedicalCards_idMedicalCard: newMedicalCard.idMedicalCard
        });

        res.status(201).json(newPatient);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
const updatePatient = async (req, res) => {
    try {
        const { id } = req.params;
        const { FirstName, LastName, MiddleName, BirthDate, Gender, InsurancePolicyNumber, TelephoneNumber, EmailAddress, Workplace, PassportData, Address, AddressType } = req.body;

        const patient = await Patients.findByPk(id);
        if (!patient) {
            return res.status(404).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        await patient.update({
            FirstName,
            LastName,
            MiddleName,
            BirthDate,
            Gender,
            InsurancePolicyNumber,
            TelephoneNumber,
            EmailAddress,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
        if (Workplace) {
            let workplaceRecord = await Workplaces.findOne({ where: { WorkplaceName: Workplace } });
            if (!workplaceRecord) {
                workplaceRecord = await Workplaces.create({ WorkplaceName: Workplace });
            }
            await patient.update({ Workplaces_idWorkplaces: workplaceRecord.idWorkplaces });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (PassportData) {
            let passportRecord = await Passports.findOne({ where: { Patients_PatientID: id } });
            if (passportRecord) {
                await passportRecord.update({ SeriesNumber: PassportData });
            } else {
                await Passports.create({ SeriesNumber: PassportData, Patients_PatientID: id });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
        if (Address) {
            let addressRecord = await Addresses.findOne({ where: { Patients_idPatient: id } });

            let addressTypeRecord = await AddressesTypes.findOne({ where: { NameOfAddressType: AddressType } });
            if (!addressTypeRecord) {
                return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∞–¥—Ä–µ—Å–∞." });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞
            if (req.body.MedicalCardIssueDate) {
                let medicalCardRecord = await MedicalCards.findOne({ where: { Patients_idPatient: id } });

                if (medicalCardRecord) {
                    await medicalCardRecord.update({ MedicalCardIssueDate: req.body.MedicalCardIssueDate });
                }
            }

            if (addressRecord) {
                await addressRecord.update({
                    FullAddress: Address,
                    AddressesTypes_idAddressType: addressTypeRecord.idAddressType,
                });
            } else {
                await Addresses.create({
                    FullAddress: Address,
                    AddressesTypes_idAddressType: addressTypeRecord.idAddressType,
                    Patients_idPatient: id
                });
            }
        }

        res.status(200).json(patient);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–º–µ—Å—Ç–µ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –∞–¥—Ä–µ—Å–æ–º)
const deletePatient = async (req, res) => {
    try {
        const { id } = req.params;
        const patient = await Patients.findByPk(id);
        if (!patient) {
            return res.status(404).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Å–ø–æ—Ä—Ç, –∞–¥—Ä–µ—Å)
        await Passports.destroy({ where: { Patients_PatientID: id } });
        await Addresses.destroy({ where: { Patients_PatientID: id } });
        await MedicalCards.destroy({ where: { Patients_idPatient: id } });

        // –£–¥–∞–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
        await patient.destroy();
        res.status(200).json({ message: "–ü–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω" });
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", error: err });
    }
};

const saveOrUpdatePatient = async (req, res) => {
    try {
        const {
            FirstName, LastName, MiddleName, BirthDate, Gender,
            InsurancePolicyNumber, TelephoneNumber, EmailAddress,
            Workplace, PassportData, PassportIssueDate, Address, AddressType,
            MedicalCardNumber
        } = req.body;

        if (!FirstName || !LastName || !BirthDate || !Gender || !InsurancePolicyNumber || !TelephoneNumber) {
            return res.status(400).json({ message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è." });
        }

        // üîç –ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã
        const medicalCard = await MedicalCards.findOne({
            where: { CardNumber: MedicalCardNumber },
            include: [{ model: Patients }]
        });

        if (medicalCard && medicalCard.Patient) {
            // ‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const patient = medicalCard.Patient;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            await patient.update({
                FirstName,
                LastName,
                MiddleName,
                BirthDate,
                Gender,
                InsurancePolicyNumber,
                TelephoneNumber,
                EmailAddress
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
            if (Workplace) {
                let workplaceRecord = await Workplaces.findOne({ where: { WorkplaceName: Workplace } });
                if (!workplaceRecord) {
                    workplaceRecord = await Workplaces.create({ WorkplaceName: Workplace });
                }
                await patient.update({ Workplaces_idWorkplaces: workplaceRecord.idWorkplaces });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç
            if (PassportData) {
                const passportRecord = await Passports.findOne({ where: { Patients_idPatient: patient.idPatient } });
                if (passportRecord) {
                    await passportRecord.update({
                        SeriesNumber: PassportData,
                        IssueDate: PassportIssueDate
                    });
                } else {
                    await Passports.create({
                        SeriesNumber: PassportData,
                        IssueDate: PassportIssueDate,
                        Patients_idPatient: patient.idPatient
                    });
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
            if (Address) {
                const addressRecord = await Addresses.findOne({ where: { Patients_idPatient: patient.idPatient } });
                const addressType = await AddressesTypes.findOne({ where: { NameOfAddressType: AddressType } });

                if (!addressType) {
                    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∞–¥—Ä–µ—Å–∞." });
                }

                if (addressRecord) {
                    await addressRecord.update({
                        FullAddress: Address,
                        AddressesTypes_idAddressType: addressType.idAddressType
                    });
                } else {
                    await Addresses.create({
                        FullAddress: Address,
                        AddressesTypes_idAddressType: addressType.idAddressType,
                        Patients_idPatient: patient.idPatient
                    });
                }
            }

            return res.status(200).json({ message: "–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã." });
        } else {
            // ‚ùå –ü–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            let workplaceRecord = await Workplaces.findOne({ where: { WorkplaceName: Workplace } });
            if (!workplaceRecord) {
                workplaceRecord = await Workplaces.create({ WorkplaceName: Workplace });
            }

            const addressType = await AddressesTypes.findOne({ where: { NameOfAddressType: AddressType } });
            if (!addressType) {
                return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∞–¥—Ä–µ—Å–∞." });
            }

            const newPatient = await Patients.create({
                FirstName,
                LastName,
                MiddleName,
                BirthDate,
                Gender,
                InsurancePolicyNumber,
                TelephoneNumber,
                EmailAddress,
                Workplaces_idWorkplaces: workplaceRecord.idWorkplaces
            });

            if (PassportData) {
                await Passports.create({
                    SeriesNumber: PassportData,
                    IssueDate: PassportIssueDate,
                    Patients_idPatient: newPatient.idPatient
                });
            }

            if (Address) {
                await Addresses.create({
                    FullAddress: Address,
                    AddressesTypes_idAddressType: addressType.idAddressType,
                    Patients_idPatient: newPatient.idPatient
                });
            }

            const generatedCardNumber = MedicalCardNumber || `MC${Date.now()}`;
            await MedicalCards.create({
                CardNumber: generatedCardNumber,
                MedicalCardIssueDate: new Date(),
                Patients_idPatient: newPatient.idPatient
            });

            return res.status(201).json({ message: "–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω." });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", error });
    }
};

module.exports = {
    getAllPatients,
    getPatientByMedicalCard,
    getPatientsForHospitalization,
    createPatient,
    updatePatient,
    deletePatient,
    generateQRCode,
    saveOrUpdatePatient
};