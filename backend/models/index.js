const sequelize = require("../config/database");

// üîπ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ **–±–µ–∑ —Å–≤—è–∑–µ–π**
const AddressesTypes = require("./AddressesTypes");
const Patients = require("./Patients");
const Doctors = require("./Doctors");
const Workplaces = require("./Workplaces");
const Passports = require("./Passports");
const Addresses = require("./Addresses");
const MedicalCards = require("./MedicalCards");
const MedicalHistory = require("./MedicalHistory");
const Specializations = require("./Specializations");
const MedicalProcedures = require("./MedicalProcedures");
const HospitalizationReasons = require("./HospitalizationReasons");
const Hospitalizations = require("./Hospitalizations");
const ProcedureTypes = require("./ProcedureTypes");
const Diagnoses = require("./Diagnoses");

// ==================== ‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –°–í–Ø–ó–ï–ô ==================== //

// üîπ –ü–∞—Ü–∏–µ–Ω—Ç –∏ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
Patients.belongsTo(Workplaces, { foreignKey: "Workplaces_idWorkplaces" });
Workplaces.hasMany(Patients, { foreignKey: "Workplaces_idWorkplaces" });

// üîπ –ü–∞—Ü–∏–µ–Ω—Ç –∏ –ø–∞—Å–ø–æ—Ä—Ç
Patients.hasOne(Passports, { foreignKey: "Patients_idPatient" });
Passports.belongsTo(Patients, { foreignKey: "Patients_idPatient" });

// üîπ –ü–∞—Ü–∏–µ–Ω—Ç –∏ –∞–¥—Ä–µ—Å
Patients.hasOne(Addresses, { foreignKey: "Patients_idPatient" });
Addresses.belongsTo(Patients, { foreignKey: "Patients_idPatient" });

// üîπ –ê–¥—Ä–µ—Å –∏ —Ç–∏–ø –∞–¥—Ä–µ—Å–∞
Addresses.belongsTo(AddressesTypes, { foreignKey: "AddressesTypes_idAddressType" });
AddressesTypes.hasMany(Addresses, { foreignKey: "AddressesTypes_idAddressType" });

// üîπ –ü–∞—Ü–∏–µ–Ω—Ç –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞
Patients.hasOne(MedicalCards, { foreignKey: "Patients_idPatient" });
MedicalCards.belongsTo(Patients, { foreignKey: "Patients_idPatient" });

// üîπ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è
MedicalCards.hasMany(MedicalHistory, { foreignKey: "MedicalCards_idMedicalCard" });
MedicalHistory.belongsTo(MedicalCards, { foreignKey: "MedicalCards_idMedicalCard" });

// üîπ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏ –¥–∏–∞–≥–Ω–æ–∑—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
MedicalHistory.belongsTo(Diagnoses, { foreignKey: "Diagnoses_idDiagnosis" });
Diagnoses.hasMany(MedicalHistory, { foreignKey: "Diagnoses_idDiagnosis" });

// üîπ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
MedicalCards.hasMany(MedicalProcedures, { foreignKey: "MedicalCards_idMedicalCard" });
MedicalProcedures.belongsTo(MedicalCards, { foreignKey: "MedicalCards_idMedicalCard" });

// üîπ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –∏—Ö —Ç–∏–ø—ã
MedicalProcedures.belongsTo(ProcedureTypes, { foreignKey: "ProcedureTypes_idProcedureType" });
ProcedureTypes.hasMany(MedicalProcedures, { foreignKey: "ProcedureTypes_idProcedureType" });

// üîπ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –¥–æ–∫—Ç–æ—Ä–∞
MedicalProcedures.belongsTo(Doctors, { foreignKey: "Doctors_idDoctor" });
Doctors.hasMany(MedicalProcedures, { foreignKey: "Doctors_idDoctor" });

// üîπ –î–æ–∫—Ç–æ—Ä–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
Doctors.belongsTo(Specializations, { foreignKey: "Specializations_SpecializationID" });
Specializations.hasMany(Doctors, { foreignKey: "Specializations_SpecializationID" });

// üîπ –ì–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–∞—Ü–∏–µ–Ω—Ç
Hospitalizations.belongsTo(Patients, { foreignKey: "Patients_idPatient" });
Patients.hasMany(Hospitalizations, { foreignKey: "Patients_idPatient" });

// üîπ –ì–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∏—á–∏–Ω—ã –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
Hospitalizations.belongsTo(HospitalizationReasons, { foreignKey: "HospitalizationReasons_idHospitalizationReasons" });
HospitalizationReasons.hasMany(Hospitalizations, { foreignKey: "HospitalizationReasons_idHospitalizationReasons" });

// ==================== ‚úÖ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ú–û–î–ï–õ–ï–ô ==================== //
module.exports = {
    sequelize,
    Patients,
    Workplaces,
    Passports,
    Addresses,
    MedicalCards,
    MedicalHistory,
    MedicalProcedures,
    ProcedureTypes,
    Diagnoses,
    AddressesTypes,
    Specializations,
    HospitalizationReasons,
    Hospitalizations,
    Doctors
};
